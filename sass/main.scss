@import 'settings.colors';
@import 'settings.global';

@import 'tools.breakpoints';
@import 'tools.clearfix';
@import 'tools.background-image';
@import 'tools.nav-links';
@import 'tools.mixins';

/* Font imports */

// Dummy example
// @font-face {
//   font-family: 'MyWebFont';
//   src: url('webfont.eot'); /* IE9 Compat Modes */
//   src: url('webfont.eot?#iefix') format('embedded-opentype'),
//     /* IE6-IE8 */ url('webfont.woff2') format('woff2'),
//     /* Super Modern Browsers */ url('webfont.woff') format('woff'),
//     /* Pretty Modern Browsers */ url('webfont.ttf') format('truetype'),
//     /* Safari, Android, iOS */ url('webfont.svg#svgFontName') format('svg'); /* Legacy iOS */
// }

// NOTE: If you open the URL for the font, you can actually see all the @font-face work being done behind the scenes.
@import url('https://fonts.googleapis.com/css?family=Montserrat:400,700');
@import url('https://fonts.googleapis.com/css?family=Anton');
@import url('https://fonts.googleapis.com/css?family=Roboto');

// Here we start using tag/type selectors

// The generic layer can be shared by all your projects
@import 'generic.box-sizing';
@import 'generic.reset';

@import 'elements.base';

// layout
@import 'components.main-header';
@import 'components.main-footer';

@import 'components.main-nav';
@import 'components.mobile-nav';

// NOTE: placeholder selectors and @extend have been replaced with mixins!!!
//@import "components.nav-links";

// generic components
@import 'components.backdrop';
@import 'components.modal';

// app components
@import 'components.product-overview';
@import 'components.buttons';
@import 'components.plan';
@import 'components.package';
@import 'components.key-features';
@import 'components.customer';
@import 'components.signup';

// trump layer
@import 'utilities.clearfix';

@import 'trumps.states';
@import 'trumps.helpers';

/* -------------------------------------------
              BEM explained
---------------------------------------------*/

/*
In BEM everything is a class and nothing is nested. That makes
CSS specificity very flat and low, which is a good idea. It means
you won't end up fighting with yourself over specificity.

BAD example

.nav .nav__listItem .btn--orange {
  background-color: green;
}

OBS: A block (such as .nav) should never override the styles of another
block or modifier (such as .btn--orange).

FUNDAMENTAL PRINCIPLES

1. Never overriding modifiers in an unrelated block.
2. Avoiding making unnecessary parent elements when the child
   can exist quite happily by itself.
*/

/* Block: A functionally independent page component that can be reused. */
/*        In HTML, blocks are represented by the class attribute. */

/*
1. The block name describes its purpose ("What is it?" — menu or button), not
   its state ("What does it look like?" — red or big).
2. The block shouldn't influence its environment, meaning you
   shouldn't set the external geometry (margin) or positioning for the block.
3. You also shouldn't use CSS tag or ID selectors when using BEM.
*/

/* Element: A composite part (child element(s) of a block that can't be used separately from it. */

/*
1. The element name describes its purpose ("What is this?" — item, text, etc.), not
   its state ("What type, or what does it look like?" — red, big, etc.).
2. The structure of an element's full name is
        block-name__element-name.
   The element name is separated from the block name with a double underscore (__).
3. An element is always part of a block, not another element. This means that element
   names can't define a hierarchy such as block__elem1__elem2.
4. The block name defines the namespace, which guarantees that the elements are dependent
   on the block (block__elem). This allows you to change a block's DOM structure without
   making changes in the css code for each separate element
*/

/* Modifier: An entity that defines the appearance, state, or behavior of a block or element. */

/*
1. The modifier name describes its appearance ("What size?" or "Which theme?"
   and so on — size_s or theme_islands), its state ("How is it different from
   the others?" — disabled, focused, etc.) and its behavior ("How does it behave?"
   or "How does it respond to the user?" — such as directions_left-top).
2. The modifier name is separated from the block or element name by a single underscore (_).
   OBS: We use 'double dashes' here => SMACSS?!?

.block {}
.block__element {}
.block--modifier {}
.block__element--modifier {}

.menu {}
.menu__item {}
.menu__item--featured {}
.menu--footer {}
*/

/*
BEM and Bootstrap-Sass:

1. Bootstrap without the debt: Sass @extend

.primary-rail {
    // A single selector (.primary-rail) can extend more than one selector.
    // This means that it inherits the styles of all the extended selectors.
    //    @extend .pull-left;
    //    @extend .col-md-6
    //    @extend .small;

    @extend .pull-left, .col-md-6, .small;
}

NOTE: @extend works by inserting the extending selector (e.g. .primary-rail)
      anywhere in the stylesheet that the extended selector (.e.g .pull-left,
      .col-md-6, .small) appears.

Build with utility, extract components as necessary (good for prototyping)

2. Use bootstrap css without having a single bootstrap class in your markup.


HOW TO GET STARTED
a. Flatten CSS selectors (use flattened/BEM'ed class selectors...don't use id-selectors!!!!)
b. Organize your code (and @import in Sass)
c. make your classes do one thing well
d. decouple for reusability
e. try a preprocessor

*/

/*

We want:

Modularity    -- Namespacing...taming global namespace
Encapsulation -- File structure
Predictablity -- syntax, taming cascade and specificity, removing classes

I suggest to switch CSS architecture in our projects to Harry Robert's ITCSS and BEMIT.

* ITCSS was introduced in the Net Magazine in June 2015 - http://www.creativebloq.com/web-design/manage-large-scale-web-projects-new-css-architecture-itcss-41514731
* The article is available online here https://www.creativebloq.com/web-design/manage-large-css-projects-itcss-101517528
* ITCSS screencast - https://www.youtube.com/watch?v=hz76JIU_xB0
* ITCSS code from the screencast - https://github.com/itcss/itcss-netmag
* another ITCSS project example https://github.com/csswizardry/frcss
* BEMIT - http://csswizardry.com/2015/08/bemit-taking-the-bem-naming-convention-a-step-further/

Also worth to check - https://github.com/inuitcss/getting-started - which is based on ITCSS too (but it doesn't contain any components).

inuitcss is a good place to check when you want to expand your ITCSS skills and study how things should be or could be done.

*/
